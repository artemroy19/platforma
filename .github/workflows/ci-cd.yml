name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: notesdb
          MYSQL_USER: user
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --mount type=volume,source=db_data,target=/var/lib/mysql

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t ${{ secrets.DOCKER_REPO }}/my-frontend:latest .
        docker push ${{ secrets.DOCKER_REPO }}/my-frontend:latest

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t ${{ secrets.DOCKER_REPO }}/my-backend:latest .
        docker push ${{ secrets.DOCKER_REPO }}/my-backend:latest

    - name: Build and push static-files image
      run: |
        cd static-files
        docker build -t ${{ secrets.DOCKER_REPO }}/my-static-files:latest .
        docker push ${{ secrets.DOCKER_REPO }}/my-static-files:latest

    - name: Build and push auth-service image
      run: |
        cd auth-service
        docker build -t ${{ secrets.DOCKER_REPO }}/my-auth-service:latest .
        docker push ${{ secrets.DOCKER_REPO }}/my-auth-service:latest

    - name: Run Docker Compose with images from registry
      run: |
        docker-compose up -d --build --remove-orphans #Добавил --remove-orphans для удаления "сиротских" контейнеров

    - name: Run Tests (Example)
      run: |
        cd backend
        npm test # Пример для Node.js
        cd ../frontend
        npm test # Пример для Node.js
        # Добавить тесты для других сервисов.
        # Используйте соответствующие команды для ваших фреймворков и языков программирования.

    - name: Cleanup
      if: always()
      run: |
        docker-compose down
